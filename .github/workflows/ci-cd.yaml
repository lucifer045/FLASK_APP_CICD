name: CICD Pipeline

on: 
  push:
     branches: [main]

env:
   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
   IMAGE_NAME: "app_deployment"
   K8S_NAMESPACE: "default"

jobs:
   ci:
     runs-on: ubuntu-latest
     steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Build Docker Image 
          uses: docker/build-push-action@v5
          with: 
             context: .
             tags: ${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
        - name: Test Docker Container 
          run: |
             CONTAINER_ID=$(docker run -d --rm -p 9001:9001 ${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest)
             trap "docker stop $CONTAINER_ID || true" EXIT 
             sleep 10
             curl --retry 5 --retry-delay 5 --fail http://localhost:9001/health 
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
             username: ${{ env.DOCKER_USERNAME}}
             password: ${{ secrets.DOCKERHUB_TOKEN}}  
        - name: Push Docker Image
          uses: docker/build-push-action@v5 
          with:
             push: true
             tags: ${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
   cd: 
     needs: ci 
     runs-on: ubuntu-latest
     environment: production
     steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Install Ansible
          run: sudo pip3 install ansible
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4 
          with: 
             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-region: us-east-1
        - name: Create EKS Cluster
          run: eksctl create cluster -f cluster.yaml
        - name: Deploy using Ansible 
          run: ansible-playbook ansible/playbooks/deploy.yaml
          env: 
            docker_username: ${{env.DOCKER_USERNAME}}
        - name: Verify Deployment 
          run: |
             kubectl port-forward svc/flask-service 8080:80 > /dev/null 2>&1 & PF_PID=$! sleep 5
             curl --retry 5 --retry-delay 5 --fail http://localhost:8080/health
             kill $PF_PID                                  

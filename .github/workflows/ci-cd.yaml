name: CICD Pipeline

on: 
  push:
     branches: [main]

env:
   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
   IMAGE_NAME: "app_deployment"
   K8S_NAMESPACE: "default"

jobs:
   ci:
     runs-on: ubuntu-latest
     steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Build Docker Image 
          uses: docker/build-push-action@v5
          with: 
             context: .
             tags: ${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:v3
        - name: Test Docker Container 
          run: |
             CONTAINER_ID=$(docker run -d --rm -p 9001:9001 ${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:v3)
             trap "docker stop $CONTAINER_ID || true" EXIT 
             sleep 10
             curl --retry 5 --retry-delay 5 --fail http://localhost:9001/health 
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
             username: ${{ env.DOCKER_USERNAME}}
             password: ${{ secrets.DOCKERHUB_TOKEN}}  
        - name: Push Docker Image
          uses: docker/build-push-action@v5 
          with:
             push: true
             tags: ${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:v3
   cd: 
     needs: ci 
     runs-on: ubuntu-latest
     environment: production
     permissions:
        id-token: write
        contents: read
     steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Install dependencies
          run: |
             sudo apt-get update
             
             #Install Ansible
             sudo pip3 install ansible
             
             #Install eksctl
             ARCH=amd64
             PLATFORM=$(uname -s)_$ARCH
             curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
             curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
             tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
             sudo mv /tmp/eksctl /usr/local/bin

             #Install kubectl
             curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
             chmod +x ./kubectl
             sudo mv ./kubectl /usr/local/bin/kubectl
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4 
          with: 
             role-to-assume: arn:aws:iam::185310489075:role/github-action-user
             aws-region: us-east-1
        - name: Check if EKS cluster exists
          id: check_cluster
          run: |
             if eksctl get cluster --name flask-cluster --region us-east-1; then
                echo "cluster_exists=true" >> $GITHUB_OUTPUT
             else
                echo "cluster_exists=false" >> $GITHUB_OUTPUT
             fi   
        - name: Create EKS Cluster
          if: steps.check_cluster.outputs.cluster_exists == 'false'
          run: eksctl create cluster -f cluster.yaml
        - name: Update kubeconfig
          run: | 
              aws eks update-kubeconfig --name flask-cluster --region us-east-1
        - name: Create Deployment and Service
          run: |
             kubectl apply -f kubernetes/deployment.yaml
             kubectl apply -f kubernetes/service.yaml
          
        # - name: Deploy using Ansible 
        #   run: ansible-playbook -i ansible/inventory/host.yaml ansible/playbooks/deploy.yaml --extra-vars "docker_username=${{ env.DOCKER_USERNAME }}" -vv
        - name: Verify Deployment 
          run: |
             kubectl port-forward svc/flask-service 8080:80 > /dev/null 2>&1 & PID=$!
             curl --retry 5 --retry-delay 5 --fail http://localhost:8080/health
             kill $PID
                                           
